{"version":3,"sources":["../../src/controller/auth.controller.ts"],"sourcesContent":["import { Body, Controller, Get, Post, Query, Req, Res } from '@nestjs/common';\r\nimport { AuthService } from 'src/service/auth.service';\r\nimport { Response, Request } from 'express';\r\n\r\n@Controller('auth')\r\nexport class AuthController {\r\n  constructor(private readonly authService: AuthService) {}\r\n\r\n  @Post('login')\r\n  async login(@Body() body: any, @Res() res: Response): Promise<any> {\r\n    const { userId } = await this.authService.signIn(body);\r\n    res.cookie('userId', userId, {\r\n      httpOnly: true,\r\n      maxAge: 1000 * 60 * 60 * 24 * 3,\r\n    });\r\n    res.status(200).send({\r\n      status: 200,\r\n      message: '登录成功',\r\n    });\r\n  }\r\n  @Get('redirect')\r\n  async oauthRedirect(\r\n    @Query() query: { code: string },\r\n    @Res() res: Response,\r\n  ): Promise<any> {\r\n    const result = await this.authService.oauthRedirect(query?.code);\r\n    if (result?.gid) {\r\n      res.cookie('gid', result?.gid, {\r\n        httpOnly: true,\r\n        maxAge: 1000 * 60 * 60 * 24 * 1,\r\n      });\r\n    }\r\n    res.status(200).send();\r\n  }\r\n\r\n  @Get('userInfo')\r\n  async getUserInfo(@Req() req: Request): Promise<any> {\r\n    const cookies = req.cookies;\r\n    return this.authService.getUserInfo(cookies);\r\n  }\r\n\r\n  @Get()\r\n  async getAuth(@Req() req: Request, @Res() res: Response): Promise<any> {\r\n    const cookies = req.cookies;\r\n    console.log(cookies, 'cookies');\r\n    if (Object.keys(cookies).length) {\r\n      res.status(302).json({ redirectUrl: 'http://localhost:3000', cookies });\r\n      return res.send();\r\n    }\r\n    return res.send({\r\n      status: 200,\r\n    });\r\n  }\r\n\r\n  @Get('logout')\r\n  async logout(@Res() res: Response): Promise<any> {\r\n    res.clearCookie('userId');\r\n    res.clearCookie('gid');\r\n    res.status(200).send({\r\n      message: 'logout success',\r\n    });\r\n  }\r\n}\r\n"],"names":["AuthController","login","body","res","userId","authService","signIn","cookie","httpOnly","maxAge","status","send","message","oauthRedirect","query","result","code","gid","getUserInfo","req","cookies","getAuth","console","log","Object","keys","length","json","redirectUrl","logout","clearCookie","constructor"],"mappings":";;;;+BAKaA;;;eAAAA;;;wBALgD;6BACjC;yBACM;;;;;;;;;;;;;;;AAG3B,IAAA,AAAMA,iBAAN,MAAMA;IAGX,MACMC,MAAM,AAAQC,IAAS,EAAE,AAAOC,GAAa,EAAgB;QACjE,MAAM,EAAEC,MAAM,EAAE,GAAG,MAAM,IAAI,CAACC,WAAW,CAACC,MAAM,CAACJ;QACjDC,IAAII,MAAM,CAAC,UAAUH,QAAQ;YAC3BI,UAAU;YACVC,QAAQ,OAAO,KAAK,KAAK,KAAK;QAChC;QACAN,IAAIO,MAAM,CAAC,KAAKC,IAAI,CAAC;YACnBD,QAAQ;YACRE,SAAS;QACX;IACF;IACA,MACMC,cACJ,AAASC,KAAuB,EAChC,AAAOX,GAAa,EACN;QACd,MAAMY,SAAS,MAAM,IAAI,CAACV,WAAW,CAACQ,aAAa,CAACC,OAAOE;QAC3D,IAAID,QAAQE,KAAK;YACfd,IAAII,MAAM,CAAC,OAAOQ,QAAQE,KAAK;gBAC7BT,UAAU;gBACVC,QAAQ,OAAO,KAAK,KAAK,KAAK;YAChC;QACF;QACAN,IAAIO,MAAM,CAAC,KAAKC,IAAI;IACtB;IAEA,MACMO,YAAY,AAAOC,GAAY,EAAgB;QACnD,MAAMC,UAAUD,IAAIC,OAAO;QAC3B,OAAO,IAAI,CAACf,WAAW,CAACa,WAAW,CAACE;IACtC;IAEA,MACMC,QAAQ,AAAOF,GAAY,EAAE,AAAOhB,GAAa,EAAgB;QACrE,MAAMiB,UAAUD,IAAIC,OAAO;QAC3BE,QAAQC,GAAG,CAACH,SAAS;QACrB,IAAII,OAAOC,IAAI,CAACL,SAASM,MAAM,EAAE;YAC/BvB,IAAIO,MAAM,CAAC,KAAKiB,IAAI,CAAC;gBAAEC,aAAa;gBAAyBR;YAAQ;YACrE,OAAOjB,IAAIQ,IAAI;QACjB;QACA,OAAOR,IAAIQ,IAAI,CAAC;YACdD,QAAQ;QACV;IACF;IAEA,MACMmB,OAAO,AAAO1B,GAAa,EAAgB;QAC/CA,IAAI2B,WAAW,CAAC;QAChB3B,IAAI2B,WAAW,CAAC;QAChB3B,IAAIO,MAAM,CAAC,KAAKC,IAAI,CAAC;YACnBC,SAAS;QACX;IACF;IAvDAmB,YAAY,AAAiB1B,WAAwB,CAAE;aAA1BA,cAAAA;IAA2B;AAwD1D"}